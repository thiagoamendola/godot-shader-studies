[gd_scene load_steps=4 format=2]

[sub_resource type="QuadMesh" id=1]
size = Vector2( 2, 2 )

[sub_resource type="Shader" id=2]
code = "shader_type spatial;
render_mode unshaded;

varying mat4 CAMERA;

void vertex() {
	CAMERA = CAMERA_MATRIX;
	POSITION = vec4(VERTEX, 1.0);
}

void fragment() {
	float depth = texture(DEPTH_TEXTURE, SCREEN_UV).x;
	vec3 ndc = vec3(SCREEN_UV, depth) * 2.0 - 1.0; // Normalized Device Coordinates
	vec4 view = INV_PROJECTION_MATRIX * vec4(ndc, 1.0); // Depth needs to be linearized by multiplying by inverse projection matrix
	view.xyz /= view.w;
	float linear_depth = -view.z;
	
	vec4 world = CAMERA * INV_PROJECTION_MATRIX * vec4(ndc, 1.0);
	vec3 world_position = world.xyz / world.w;
	
	ALBEDO = vec3(linear_depth) * 0.05;

	vec4 color = texture(SCREEN_TEXTURE, SCREEN_UV);
}
"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )

[node name="DepthShaderExample" type="Spatial"]

[node name="CSGBox" type="CSGBox" parent="."]
transform = Transform( -0.947077, -0.145785, -0.285994, -0.178521, -0.501247, 0.846688, -0.266788, 0.852935, 0.448694, -3.40609, 0, -2.31164 )

[node name="CSGBox2" type="CSGBox" parent="."]
transform = Transform( -0.551101, 0.653061, -0.519422, -0.786497, -0.614486, 0.0618826, -0.278765, 0.442628, 0.852274, 0.595712, -0.091699, -0.859752 )

[node name="CSGBox3" type="CSGBox" parent="."]
transform = Transform( 0.92466, 0.250184, 0.287074, 0.0364906, 0.692199, -0.720784, -0.379041, 0.676956, 0.63092, 4.02684, -0.130188, -3.38549 )

[node name="Camera" type="Camera" parent="."]
transform = Transform( 1, 0, 0, 0, 0.972133, 0.23443, 0, -0.23443, 0.972133, 0, 1.41415, 3.5184 )

[node name="ShaderQuad" type="MeshInstance" parent="Camera"]
transform = Transform( 1, 0, 0, 0, 0.972133, -0.23443, 0, 0.23443, 0.972133, 0, -0.549923, -3.75187 )
extra_cull_margin = 16384.0
mesh = SubResource( 1 )
skeleton = NodePath("../..")
material/0 = SubResource( 3 )
